name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run stability tests daily at 2 AM
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Static Analysis and Linting
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint sync-server
        run: pnpm --filter sync-server run lint

      - name: Lint web app
        run: pnpm --filter web run lint

      - name: Type check sync-server
        run: pnpm --filter sync-server run build

      - name: Type check web app
        run: pnpm --filter web run build

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: euplan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
        run: |
          pnpm --filter web run db:generate
          pnpm --filter web run db:migrate

      - name: Run sync-server unit tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
          NODE_ENV: test
        run: pnpm --filter sync-server run test --coverage

      - name: Upload sync-server coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/sync-server/coverage/lcov.info
          flags: sync-server-unit
          name: sync-server-unit-tests

      - name: Check coverage thresholds
        run: |
          # Ensure minimum 80% coverage
          pnpm --filter sync-server run test:cov --coverageThreshold.global.statements=80

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: euplan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
        run: |
          pnpm --filter web run db:generate
          pnpm --filter web run db:migrate

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
          NODE_ENV: test
        run: pnpm --filter sync-server run test:e2e

      - name: Run WebSocket integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
          NODE_ENV: test
        run: |
          # Start server in background
          pnpm --filter sync-server run start:dev &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 10
          
          # Run WebSocket tests
          pnpm --filter sync-server test test/collaboration.integration.spec.ts
          
          # Stop server
          kill $SERVER_PID

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: euplan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
        run: |
          pnpm --filter web run db:generate
          pnpm --filter web run db:migrate

      - name: Run performance tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
          NODE_ENV: test
        run: |
          # Start server in background
          pnpm --filter sync-server run start:dev &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 15
          
          # Run performance tests
          pnpm --filter sync-server test test/performance.spec.ts --testTimeout=60000
          
          # Stop server
          kill $SERVER_PID

      - name: Performance regression check
        run: |
          echo "Performance metrics recorded"
          # TODO: Implement performance regression detection
          # Compare current results with baseline and fail if significant degradation

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: euplan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm --filter web run playwright install --with-deps

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
        run: |
          pnpm --filter web run db:generate
          pnpm --filter web run db:migrate

      - name: Build applications
        run: |
          pnpm --filter sync-server run build
          pnpm --filter web run build

      - name: Start applications
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
          NODE_ENV: test
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
        run: |
          # Start sync server
          pnpm --filter sync-server run start:prod &
          SYNC_SERVER_PID=$!
          
          # Start web app
          pnpm --filter web run start &
          WEB_SERVER_PID=$!
          
          # Wait for servers to start
          sleep 20
          
          # Store PIDs for cleanup
          echo $SYNC_SERVER_PID > sync_server.pid
          echo $WEB_SERVER_PID > web_server.pid

      - name: Run E2E tests
        run: pnpm --filter web run playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 30

      - name: Cleanup servers
        if: always()
        run: |
          if [ -f sync_server.pid ]; then
            kill $(cat sync_server.pid) || true
          fi
          if [ -f web_server.pid ]; then
            kill $(cat web_server.pid) || true
          fi

  # Error Handling and Edge Cases
  error-handling-tests:
    name: Error Handling Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: euplan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
        run: |
          pnpm --filter web run db:generate
          pnpm --filter web run db:migrate

      - name: Run error handling tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
          NODE_ENV: test
        run: |
          # Start server in background
          pnpm --filter sync-server run start:dev &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 15
          
          # Run error handling tests
          pnpm --filter sync-server test test/error-handling.spec.ts --testTimeout=30000
          
          # Stop server
          kill $SERVER_PID

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level moderate

      - name: Check for hardcoded secrets
        run: |
          # Check for common patterns of hardcoded secrets
          if grep -r -i "password.*=" --include="*.ts" --include="*.js" --exclude-dir=node_modules .; then
            echo "Potential hardcoded password found"
            exit 1
          fi
          
          if grep -r -i "secret.*=" --include="*.ts" --include="*.js" --exclude-dir=node_modules .; then
            echo "Potential hardcoded secret found"
            exit 1
          fi

      - name: Check for SQL injection patterns
        run: |
          # Check for potential SQL injection vulnerabilities
          if grep -r "query.*+.*req\." --include="*.ts" --include="*.js" --exclude-dir=node_modules .; then
            echo "Potential SQL injection vulnerability found"
            exit 1
          fi

  # Nightly Stability Tests
  nightly-stability:
    name: Nightly Stability Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: euplan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
        run: |
          pnpm --filter web run db:generate
          pnpm --filter web run db:migrate

      - name: Run extended stability tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/euplan_test
          NODE_ENV: test
        run: |
          # Start server in background
          pnpm --filter sync-server run start:dev &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 15
          
          # Run all test suites for extended period
          timeout 3600 pnpm --filter sync-server test --testTimeout=120000 || true
          
          # Stop server
          kill $SERVER_PID

      - name: Generate stability report
        run: |
          echo "Nightly stability test completed"
          echo "Test duration: 1 hour"
          echo "Timestamp: $(date)"

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, integration-tests, performance-tests, e2e-tests, error-handling-tests, security-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Test Summary:"
          echo "Lint and Type Check: ${{ needs.lint-and-typecheck.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Error Handling Tests: ${{ needs.error-handling-tests.result }}"
          echo "Security Tests: ${{ needs.security-tests.result }}"

      - name: Notify if any tests failed
        if: needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.e2e-tests.result == 'failure'
        run: |
          echo "❌ Critical tests failed!"
          exit 1

      - name: Success notification
        if: needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success'
        run: |
          echo "✅ All critical tests passed!"